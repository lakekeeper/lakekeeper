model
  schema 1.1

type user

type auth_model_id

type model_version
  relations
    define applied: [auth_model_id]
    define exists: [auth_model_id:*]

type role
  relations
    # Relation Hierarchies
    define project: [project]
    define assignee: [user, role#assignee]
    define ownership: [user, role#assignee]

    # ------------------ Actions ------------------
    # Can assume a role
    define can_assume: assignee
    define can_grant_assignee: ownership or security_admin from project
    define can_change_ownership: can_grant_assignee
    define can_delete: can_grant_assignee
    # Can update base attributes like name and description
    define can_update: can_grant_assignee
    # Can get name and description of this role
    define can_read: can_list_roles from project
    # get assignments to this role
    define can_read_assignments: can_read

type server
  relations
    # Relation Hierarchies
    define project: [project]

    # ------------------ Built-in Roles ------------------
    # The server administrator is able to administrate the server and list all projects.
    # In order to perform actions inside projects, the admin can assign himself
    # as `project_admin` on each project. This action is visible in the audit log.
    # The admin role is designed for human users.
    define admin: [user, role#assignee]

    # Opererators are more powerful than administrators - they are the most powerful role in
    # Lakekeeper. The operator role allows usage of all APIs inside the catalog. It is designed
    # to be used by machines that provision resources inside Lakekeeper, i.e. a `KubernetesOperator`
    define operator: [user, role#assignee]

    # ------------------ Actions ------------------
    define can_create_project: admin or operator

    # Anyone can list projects, they are however filtered by can_include_in_list of the project.
    # Only admin can list all projects.
    define can_list_all_projects: admin or operator
    define can_list_users: admin or operator
    define can_provision_users: admin or operator
    define can_update_users: admin or operator
    define can_delete_users: admin or operator
    define can_read_assignments: admin or operator

    # GRANT Permissions
    define can_grant_admin: admin or operator
    define can_grant_operator: admin or operator

type project
  relations
    # Relation Hierarchies
    define warehouse: [warehouse]
    define server: [server]

    # ------------------ Built-in Roles ------------------
    # Project Admin has two purposes:
    # 1. Lock-out protection: Checked to never be empty
    # 2. Granting new privileges, such as billing, which might require separate permissions / admin roles
    define project_admin: [user, role#assignee] or operator from server
    # Security Admins can manage all security aspects (grants, ownership) but not modify, create or access objects
    define security_admin: [user, role#assignee] or project_admin
    # Data Admins can manage all warehouse aspects but not grant privileges
    define data_admin: [user, role#assignee] or project_admin
    # Can create new roles - cannot add assignees to existing roles
    define role_creator: [user, role#assignee] or security_admin

    # ------------------ Assignable Privileges ------------------
    # Privileges relevant for the warehouse and sub-objects
    define describe: [user, role#assignee] or select or create or data_admin or security_admin
    define select: [user, role#assignee] or modify
    define create: [user, role#assignee] or data_admin
    define modify: [user, role#assignee] or project_admin

    # ------------------ Actions ------------------
    # Create stuff inside the project / create new warehouses
    define can_create_warehouse: create
    # Drop this project
    define can_delete: modify
    define can_rename: modify
    define can_get_metadata: describe or can_get_metadata from warehouse or admin from server
    # Can list elements in this projects - will be filtered subsequently
    define can_list_warehouses: can_get_metadata
    define can_include_in_list: can_get_metadata
    # Roles
    define can_create_role: role_creator
    define can_list_roles: can_get_metadata or admin from server
    define can_search_roles: can_list_roles or admin from server
    # Only if we can GRANT a privilege, we can LIST them for now
    define can_read_assignments: security_admin or project_admin or admin from server

    # GRANT Permissions
    define can_grant_role_creator: security_admin or admin from server
    define can_grant_create: security_admin or admin from server
    define can_grant_describe: security_admin or admin from server
    define can_grant_modify: security_admin or admin from server
    define can_grant_select: security_admin or admin from server
    define can_grant_project_admin: project_admin or admin from server
    define can_grant_security_admin: security_admin or admin from server
    define can_grant_data_admin: data_admin or admin from server

type warehouse
  relations
    # ------------------ Relation Hierarchies ------------------
    define project: [project]
    define namespace: [namespace]

    # ------------------ Special roles ------------------
    define ownership: [user, role#assignee]
    define managed_access: [user:*, role:*]
    define managed_access_inheritance: managed_access

    # ------------------ Assignable Privileges ------------------
    define pass_grants: [user, role#assignee]
    define manage_grants: [user, role#assignee] or ownership or security_admin from project
    define describe: [user, role#assignee] or ownership or select or create or describe from project
    define select: [user, role#assignee] or ownership or modify or select from project
    define create: [user, role#assignee] or ownership or create from project
    define modify: [user, role#assignee] or ownership or modify from project or data_admin from project

    # ------------------ Actions ------------------
    define can_create_namespace: create
    # Delete this warehouse premanently
    define can_delete: modify
    define can_update_storage: modify
    define can_update_storage_credential: modify
    define can_get_metadata: describe or can_get_metadata from namespace
    define can_get_config: can_get_metadata
    # Can list elements in this warehouse - will be filtered subsequently
    define can_list_namespaces: can_get_metadata
    define can_use: can_get_metadata
    define can_include_in_list: can_get_metadata
    define can_deactivate: modify
    define can_activate: modify
    define can_rename: modify
    define can_list_deleted_tabulars: can_get_metadata
    define can_modify_soft_deletion: modify
    # Only if we can GRANT a privilege, we can LIST them for now
    define can_read_assignments: can_grant_create or can_grant_describe or can_grant_modify or can_grant_select or can_grant_pass_grants or can_grant_manage_grants or can_change_ownership
    # GRANT Permissions
    define can_grant_create: manage_grants or (create and pass_grants)
    define can_grant_describe: manage_grants or (describe and pass_grants)
    define can_grant_modify: manage_grants or (modify and pass_grants)
    define can_grant_select: manage_grants or (select and pass_grants)
    define can_grant_pass_grants: manage_grants
    define can_grant_manage_grants: manage_grants
    define can_change_ownership: manage_grants
    define can_set_managed_access: manage_grants

type namespace
  relations
    # ------------------ Relation Hierarchies ------------------
    define parent: [namespace, warehouse]
    define child: [namespace, table, view]

    # ------------------ Special roles ------------------
    define ownership: [user, role#assignee]
    define managed_access: [user:*, role:*]
    define managed_access_inheritance: managed_access or managed_access_inheritance from parent

    # ------------------ Assignable Privileges ------------------
    define pass_grants: [user, role#assignee]
    define manage_grants: [user, role#assignee] or (ownership but not managed_access_inheritance from parent) or manage_grants from parent
    define describe: [user, role#assignee] or ownership or select or create or describe from parent
    define select: [user, role#assignee] or ownership or modify or select from parent
    define create: [user, role#assignee] or ownership or create from parent
    define modify: [user, role#assignee] or ownership or modify from parent

    # ------------------ Actions ------------------
    define can_create_table: create
    define can_create_view: create
    define can_create_namespace: create
    define can_delete: modify
    define can_update_properties: modify
    define can_get_metadata: describe or can_get_metadata from child
    define can_list_tables: can_get_metadata
    define can_list_views: can_get_metadata
    define can_list_namespaces: can_get_metadata
    define can_include_in_list: can_get_metadata
    define can_read_assignments: can_grant_create or can_grant_describe or can_grant_modify or can_grant_select or can_grant_pass_grants or can_grant_manage_grants or can_change_ownership
    # GRANT Permissions
    define can_grant_create: manage_grants or (create and pass_grants)
    define can_grant_describe: manage_grants or (describe and pass_grants)
    define can_grant_modify: manage_grants or (modify and pass_grants)
    define can_grant_select: manage_grants or (select and pass_grants)
    define can_grant_pass_grants: manage_grants
    define can_grant_manage_grants: manage_grants
    define can_change_ownership: manage_grants
    define can_set_managed_access: manage_grants

type table
  relations
    # ------------------ Relation Hierarchies ------------------
    define parent: [namespace]

    # ------------------ Special roles ------------------
    define ownership: [user, role#assignee]

    # ------------------ Assignable Privileges ------------------
    define pass_grants: [user, role#assignee]
    define manage_grants: [user, role#assignee] or (ownership but not managed_access_inheritance from parent) or manage_grants from parent
    define describe: [user, role#assignee] or ownership or select or describe from parent
    define select: [user, role#assignee] or ownership or modify or select from parent
    define modify: [user, role#assignee] or ownership or modify from parent

    # ------------------ Actions ------------------
    define can_drop: modify
    define can_write_data: modify
    define can_read_data: select
    define can_get_metadata: describe
    define can_commit: modify
    define can_rename: modify
    define can_include_in_list: can_get_metadata
    define can_read_assignments: can_grant_pass_grants or can_grant_manage_grants or can_grant_describe or can_grant_select or can_grant_modify or can_change_ownership

    # GRANT Permissions
    define can_grant_pass_grants: manage_grants
    define can_grant_manage_grants: manage_grants
    define can_grant_describe: manage_grants or (describe and pass_grants)
    define can_grant_select: manage_grants or (select and pass_grants)
    define can_grant_modify: manage_grants or (modify and pass_grants)
    define can_change_ownership: manage_grants

type view
  relations
    # ------------------ Relation Hierarchies ------------------
    define parent: [namespace]

    # ------------------ Special roles ------------------
    define ownership: [user, role#assignee]

    # ------------------ Assignable Privileges ------------------
    define pass_grants: [user, role#assignee]
    define manage_grants: [user, role#assignee] or (ownership but not managed_access_inheritance from parent) or manage_grants from parent
    define describe: [user, role#assignee] or ownership or modify or describe from parent
    define modify: [user, role#assignee] or ownership or modify from parent

    # ------------------ Actions ------------------
    define can_drop: modify
    define can_commit: modify
    define can_get_metadata: describe
    define can_rename: modify
    define can_include_in_list: can_get_metadata
    define can_read_assignments: can_grant_pass_grants or can_grant_manage_grants or can_grant_describe or can_grant_modify or can_change_ownership

    # GRANT Permissions
    define can_grant_pass_grants: manage_grants
    define can_grant_manage_grants: manage_grants
    define can_grant_describe: manage_grants or (describe and pass_grants)
    define can_grant_modify: manage_grants or (modify and pass_grants)
    define can_change_ownership: manage_grants
