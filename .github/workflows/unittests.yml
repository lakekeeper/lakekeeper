name: Unittests

on:
  push:
    branches:
      - main
      - "manual-release-*"
  pull_request:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.87

permissions:
  contents: read  # Needed to checkout code
  checks: write   # Needed for test reporting

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name }}
  cancel-in-progress: true

jobs:
  tests-pass:
    name: all tests pass
    runs-on: ubuntu-latest
    needs:
      - sqlx-check
      - check-format
      - clippy
      - check-generated-openapi-matches
      - test
    steps:
      - run: exit 0
  sqlx-check:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v5
      - name: Cargo sqlx-check
        run: |
          export DEBIAN_FRONTEND=noninteractive 
          sudo apt-get update && sudo apt-get install -yqq libpq-dev --no-install-recommends
          cargo install -q --version=0.8.2 sqlx-cli --no-default-features --features postgres
          cargo sqlx prepare --check --workspace -- --all-features

  check-format:
    runs-on: ubuntu-24.04
    steps:
      - run: sudo snap install --edge --classic just
      - uses: actions/checkout@v5

      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: rustfmt
          toolchain: ${{ env.RUST_TOOLCHAIN }},nightly
        env:
          RUST_CACHE_KEY_OS: rust-${{ env.RUST_TOOLCHAIN }}-cache-ubuntu-24.04

      - name: Cargo format
        run: just check-format

      - name: Check diff
        run: git diff --exit-code

  clippy:
    runs-on: ubuntu-24.04
    steps:
      - run: |
          sudo snap install --edge --classic just

      - uses: actions/checkout@v5

      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
          toolchain: ${{ env.RUST_TOOLCHAIN }}
        env:
          RUST_CACHE_KEY_OS: rust-${{ env.RUST_TOOLCHAIN }}-cache-ubuntu-24.04

      - name: Cargo clippy
        run: just check-clippy
        env:
          RUST_CACHE_KEY_OS: rust-${{ env.RUST_TOOLCHAIN }}-cache-ubuntu-24.04

  check-generated-openapi-matches:
    runs-on: ubuntu-24.04
    steps:
      - run: |
          sudo snap install --edge --classic just
      - uses: actions/checkout@v5
      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          components: clippy
          toolchain: ${{ env.RUST_TOOLCHAIN }}
        env:
          RUST_CACHE_KEY_OS: rust-${{ env.RUST_TOOLCHAIN }}-cache-ubuntu-24.04
      - name: Regenerate management openapi
        run: just update-management-openapi
      - name: Fail on diff
        run: git diff -I ".*version.*" -w --ignore-blank-lines --exit-code Cargo.lock docs/docs/api/
      - uses: actions/setup-node@v6
        with:
          node-version: 24
      - name: Build TS Client
        run: npx @hey-api/openapi-ts -i docs/docs/api/management-open-api.yaml -o src/gen/management -c @hey-api/client-fetch

  test:
    runs-on: ubuntu-24.04
    services:
      vault:
        image: hashicorp/vault:latest
        ports:
          - 8200:8200
        env:
          VAULT_DEV_ROOT_TOKEN_ID: myroot
          VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
        options: >-
          --health-cmd "vault status -address http://localhost:8200"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      GCS_CREDENTIAL: ${{ secrets.GCS_CREDENTIAL }}
    steps:
      - uses: actions/checkout@v5

      - name: Start Minio Docker Container
        run: |
          docker run -d --name minio -p 9000:9000 -p 9001:9001 \
            -e "MINIO_ROOT_USER=minio-root-user" \
            -e "MINIO_ROOT_PASSWORD=minio-root-password" \
            minio/minio:RELEASE.2025-07-23T15-54-02Z server --console-address ":9001" /data
      
      - name: Wait for Minio to be healthy
        shell: bash
        run: |
          for i in {1..10}; do
            if curl -I http://localhost:9000/minio/health/live; then
              echo "Minio is healthy"
              exit 0
            else
              echo "Waiting for Minio to be healthy..."
              sleep 5
            fi
          done
          echo "Minio did not become healthy in time"
          exit 1

      - name: Create Minio Bucket
        run: |
          docker exec minio /usr/bin/mc alias set local http://localhost:9000 minio-root-user minio-root-password
          docker exec minio /usr/bin/mc mb local/tests

      - uses: azure/login@v2
        if: ${{ env.AZURE_CLIENT_ID != '' }}
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'
          allow-no-subscriptions: true

      - name: Write gcp credential to file
        if: ${{ env.GCS_CREDENTIAL != '' }}
        run: echo '${{ secrets.GCS_CREDENTIAL }}' > /tmp/gcs.json
        shell: bash

      - name: Setup Rust toolchain and cache
        uses: actions-rust-lang/setup-rust-toolchain@v1
        env:
          RUST_CACHE_KEY_OS: rust-${{ env.RUST_TOOLCHAIN }}-cache-ubuntu-24.04

      - name: Setup cargo nextest
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-nextest

      - name: Determine nextest profile
        run: |
          if [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" ]]; then
            # PR is made off this repo, so workflows have access to secrets and the entire suite
            # can be run.
            echo "NEXTEST_PROFILE=ci" >> $GITHUB_ENV
          else
            # PR is made off a fork, so secrets are not available in ci workflows.
            echo "NEXTEST_PROFILE=ci_no_secrets" >> $GITHUB_ENV
          fi

      - name: Migrate database
        run: |
          export DEBIAN_FRONTEND=noninteractive 
          sudo apt-get update && sudo apt-get install -yqq libpq-dev --no-install-recommends
          cargo install -q --version=0.8.2 sqlx-cli --no-default-features --features postgres
          cd crates/lakekeeper
          sqlx database create
          sqlx migrate run
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

      - name: Setup vault
        run: |
          export VAULT_ADDR=http://localhost:8200
          export DEBIAN_FRONTEND=noninteractive 
          sudo apt update && sudo apt install gpg wget
          wget -O- https://apt.releases.hashicorp.com/gpg | sudo gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
          gpg --no-default-keyring --keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg --fingerprint
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/hashicorp.list
          sudo apt update && sudo apt install vault

          vault login -address "${VAULT_ADDR}" myroot
          vault auth  enable -address "${VAULT_ADDR}"  userpass
          echo "path \"secret/*\" { capabilities = [\"create\", \"read\", \"update\", \"delete\", \"list\"] }" > /tmp/app.hcl
          vault policy write -address "${VAULT_ADDR}" app /tmp/app.hcl
          vault write -address "${VAULT_ADDR}" auth/userpass/users/test password=test policies=app

      - name: Setup openfga
        run: docker run -d -p 35081:8081 openfga/openfga:v1.8 run

      - name: Test
        run: cargo nextest run --profile ${{ env.NEXTEST_PROFILE }} --all-targets --all-features --workspace
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
          LAKEKEEPER_TEST__KV2__URL: http://localhost:8200
          LAKEKEEPER_TEST__KV2__USER: test
          LAKEKEEPER_TEST__KV2__PASSWORD: test
          LAKEKEEPER_TEST__KV2__SECRET_MOUNT: secret
          # minio test envs
          LAKEKEEPER_TEST__S3_BUCKET: tests
          LAKEKEEPER_TEST__S3_REGION: local
          LAKEKEEPER_TEST__S3_ACCESS_KEY: minio-root-user
          LAKEKEEPER_TEST__S3_SECRET_KEY: minio-root-password
          LAKEKEEPER_TEST__S3_ENDPOINT: http://localhost:9000

          LAKEKEEPER_TEST__ENABLE_AZURE_SYSTEM_CREDENTIALS: true
          LAKEKEEPER_TEST__ENABLE_GCP_SYSTEM_CREDENTIALS: true

          LAKEKEEPER_TEST__OPENFGA__ENDPOINT: http://localhost:35081
          GOOGLE_APPLICATION_CREDENTIALS: /tmp/gcs.json

          LAKEKEEPER_TEST__AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          LAKEKEEPER_TEST__AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          LAKEKEEPER_TEST__AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          LAKEKEEPER_TEST__AZURE_STORAGE_ACCOUNT_NAME: ${{ secrets.AZURE_STORAGE_ACCOUNT_NAME }}
          LAKEKEEPER_TEST__AZURE_STORAGE_FILESYSTEM: ${{ secrets.AZURE_STORAGE_FILESYSTEM }}
          LAKEKEEPER_TEST__AZURE_STORAGE_SHARED_KEY: ${{ secrets.AZURE_STORAGE_SHARED_KEY }}

          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
          AWS_S3_ACCESS_KEY_ID: ${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          AWS_S3_SECRET_ACCESS_KEY: ${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          AWS_S3_STS_ROLE_ARN: ${{ secrets.AWS_S3_STS_ROLE_ARN }}
          AWS_KMS_S3_BUCKET: ${{ secrets.AWS_KMS_S3_BUCKET }}
          AWS_S3_KMS_ARN: ${{ secrets.AWS_S3_KMS_ARN }}

          TEST_R2: ${{ secrets.TEST_R2 }}
          LAKEKEEPER_TEST__R2_BUCKET: ${{ secrets.LAKEKEEPER_TEST__R2_BUCKET }}
          LAKEKEEPER_TEST__R2_TOKEN: ${{ secrets.LAKEKEEPER_TEST__R2_TOKEN }}
          LAKEKEEPER_TEST__R2_SECRET_ACCESS_KEY: ${{ secrets.LAKEKEEPER_TEST__R2_SECRET_ACCESS_KEY }}
          LAKEKEEPER_TEST__R2_ACCESS_KEY_ID: ${{ secrets.LAKEKEEPER_TEST__R2_ACCESS_KEY_ID }}
          LAKEKEEPER_TEST__R2_ACCOUNT_ID: ${{ secrets.LAKEKEEPER_TEST__R2_ACCOUNT_ID }}
          LAKEKEEPER_TEST__R2_ENDPOINT: ${{ secrets.LAKEKEEPER_TEST__R2_ENDPOINT }}

          LAKEKEEPER_TEST__GCS_BUCKET: ${{ secrets.GCS_BUCKET }}
          LAKEKEEPER_TEST__GCS_HNS_BUCKET: ${{ secrets.GCS_HNS_BUCKET }}
          LAKEKEEPER_TEST__GCS_CREDENTIAL: ${{ secrets.GCS_CREDENTIAL }}
      - name: Upload junit
        uses: actions/upload-artifact@v4
        with:
          name: junit
          path: target/nextest/ci/junit.xml
      - name: Doc Test
        run: cargo test --no-fail-fast --doc --all-features --workspace
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres
