services:
  jupyter:
    image: quay.io/jupyter/pyspark-notebook:2024-10-14
    depends_on:
      lakekeeper:
        condition: service_healthy
      trino:
        condition: service_healthy
      starrocks:
        condition: service_healthy
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./notebooks:/home/jovyan/examples/
    networks:
      iceberg_net:
    ports:
      - "8888:8888"

  keycloak:
    image: quay.io/keycloak/keycloak:26.0.7
    environment:
      - KC_BOOTSTRAP_ADMIN_USERNAME=admin
      - KC_BOOTSTRAP_ADMIN_PASSWORD=admin
    volumes:
      - ./keycloak/realm.json:/opt/keycloak/data/import/realm.json
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/127.0.0.1/8080;echo -e "GET /realms/master/.well-known/openid-configuration HTTP/1.1\r\nhost: 127.0.0.1:8080\r\nConnection: close\r\n\r\n" >&3;grep "jwks_uri"  <&3',
        ]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 60s
    ports:
      - "30080:8080"
    command:
      [
        "start-dev",
        "--metrics-enabled=true",
        "--health-enabled=true",
        "--import-realm",
        "--verbose",
        "--log-level=INFO",
        "--features=token-exchange",
      ]
    networks:
      iceberg_net:

  lakekeeper:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__AUTHZ_BACKEND=openfga
      - LAKEKEEPER__OPENFGA__ENDPOINT=http://openfga:8081
      - LAKEKEEPER__OPENID_PROVIDER_URI=http://keycloak:8080/realms/iceberg
      - LAKEKEEPER__OPENID_ADDITIONAL_ISSUERS=http://localhost:30080/realms/iceberg
      - LAKEKEEPER__OPENID_AUDIENCE=lakekeeper
      - LAKEKEEPER__UI__OPENID_CLIENT_ID=lakekeeper
      - LAKEKEEPER__UI__OPENID_PROVIDER_URI=http://localhost:30080/realms/iceberg
      - LAKEKEEPER__OPENFGA__CLIENT_ID=openfga
      - LAKEKEEPER__OPENFGA__CLIENT_SECRET=xqE1vUrifVDKAZdLuz6JAnDxMYLdGu5z
      - LAKEKEEPER__OPENFGA__TOKEN_ENDPOINT=http://keycloak:8080/realms/iceberg/protocol/openid-connect/token
      - RUST_LOG=info,lakekeeper=trace,middle=trace
    command: ["serve"]
    healthcheck:
      test: ["CMD", "/home/nonroot/lakekeeper", "healthcheck"]
      interval: 1s
      timeout: 10s
      retries: 3
      start_period: 3s
    depends_on:
      migrate:
        condition: service_completed_successfully
      createbuckets:
        condition: service_completed_successfully
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    ports:
      - "8181:8181"
    networks:
      iceberg_net:

  trino:
    image: trinodb/trino:467
    environment:
      - CATALOG_MANAGEMENT=dynamic
    healthcheck:
      test: ["CMD", "curl", "-I", "http://localhost:8080/v1/status"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    ports:
      - "9999:8080"
    networks:
      - iceberg_net

  migrate:
    image: ${LAKEKEEPER_TEST__SERVER_IMAGE:-quay.io/lakekeeper/catalog:latest-main}
    pull_policy: always
    environment:
      - LAKEKEEPER__PG_ENCRYPTION_KEY=This-is-NOT-Secure!
      - LAKEKEEPER__PG_DATABASE_URL_READ=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__PG_DATABASE_URL_WRITE=postgresql://postgres:postgres@db:5432/postgres
      - LAKEKEEPER__AUTHZ_BACKEND=openfga
      - LAKEKEEPER__OPENFGA__ENDPOINT=http://openfga:8081
      - LAKEKEEPER__OPENFGA__CLIENT_ID=openfga
      - LAKEKEEPER__OPENFGA__CLIENT_SECRET=xqE1vUrifVDKAZdLuz6JAnDxMYLdGu5z
      - LAKEKEEPER__OPENFGA__TOKEN_ENDPOINT=http://keycloak:8080/realms/iceberg/protocol/openid-connect/token
      - RUST_LOG=info,lakekeeper=info,middle=trace
    restart: "no"
    entrypoint: ["/home/nonroot/lakekeeper", "migrate"]
    depends_on:
      db:
        condition: service_healthy
      openfga:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      iceberg_net:

  db:
    image: postgres:17
    environment:
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      iceberg_net:

  openfga-db:
    image: postgres:17
    environment:
      - POSTGRES_PASSWORD=postgres
    command: -c 'max_connections=500'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -p 5432 -d postgres"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 10s
    networks:
      iceberg_net:

  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    environment:
      - MINIO_ROOT_USER=minio-root-user
      - MINIO_ROOT_PASSWORD=minio-root-password
    command: ["server", "--console-address", ":9001", "/data"]
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 15s
    networks:
      iceberg_net:

  createbuckets:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    depends_on:
      minio:
        condition: service_healthy
    restart: on-failure
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set dockerminio http://minio:9000 minio-root-user minio-root-password;
      /usr/bin/mc mb dockerminio/examples;
      exit 0;
      "
    networks:
      iceberg_net:

  openfga-migrate:
    image: openfga/openfga:v1.8
    command: migrate
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:postgres@openfga-db:5432/postgres?sslmode=disable
    networks:
      iceberg_net:
    depends_on:
      openfga-db:
        condition: service_healthy
      keycloak:
        condition: service_healthy

  openfga:
    depends_on:
      openfga-db:
        condition: service_healthy
      openfga-migrate:
        condition: service_completed_successfully
    image: openfga/openfga:v1.8
    command: run
    environment:
      - OPENFGA_DATASTORE_ENGINE=postgres
      - OPENFGA_DATASTORE_URI=postgres://postgres:postgres@openfga-db:5432/postgres?sslmode=disable
      - OPENFGA_DATASTORE_MAX_OPEN_CONNS=200
      - OPENFGA_DATASTORE_MAX_IDLE_CONNS=100
      - OPENFGA_PLAYGROUND_ENABLED=false
      - OPENFGA_AUTHN_METHOD=oidc
      - OPENFGA_AUTHN_OIDC_ISSUER=http://keycloak:8080/realms/iceberg
      - OPENFGA_AUTHN_OIDC_ISSUER_ALIASES=http://localhost:30080/realms/iceberg
      - OPENFGA_AUTHN_OIDC_AUDIENCE=openfga
      - OPENFGA_HTTP_TLS_ENABLED=false
      - OPENFGA_CACHE_CONTROLLER_ENABLED=true
      - OPENFGA_CHECK_QUERY_CACHE_ENABLED=true
      - OPENFGA_CHECK_ITERATOR_CACHE_ENABLED=true
    networks:
      iceberg_net:
    healthcheck:
      test: ["CMD", "/usr/local/bin/grpc_health_probe", "-addr=openfga:8081"]
      interval: 5s
      timeout: 30s
      retries: 3

  starrocks:
    image: starrocks/allin1-ubuntu:3.3.9
    healthcheck:
      test: ["CMD", "curl", "-I", "http://starrocks:8030/api/health"]
      interval: 2s
      timeout: 10s
      retries: 2
      start_period: 40s
    ports:
      - "9030:9030"
      - "8030:8030"
    networks:
      - iceberg_net

networks:
  iceberg_net:
