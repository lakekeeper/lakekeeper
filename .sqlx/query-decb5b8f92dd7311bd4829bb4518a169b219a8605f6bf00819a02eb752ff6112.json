{
  "db_name": "PostgreSQL",
  "query": "\n        WITH namespace_name AS (\n            SELECT namespace_name\n            FROM namespace\n            WHERE warehouse_id = $1 AND namespace_id = $2\n        ),\n        child_namespaces AS (\n            SELECT n.protected, n.namespace_id\n            FROM namespace n\n            INNER JOIN namespace_name nn ON n.namespace_name[1:array_length(nn.namespace_name, 1)] = nn.namespace_name\n            WHERE n.warehouse_id = $1 AND n.namespace_id != $2\n        ),\n        tabulars AS (\n            SELECT ta.tabular_id, te.task_id, t.status as task_status, fs_location, fs_protocol, ta.typ, protected\n            FROM tabular ta\n                LEFT JOIN tabular_expirations te ON ta.tabular_id = te.tabular_id\n                LEFT JOIN task t on te.task_id = t.task_id\n            WHERE namespace_id = $2 OR (namespace_id = ANY (SELECT namespace_id FROM child_namespaces))\n        ),\n        deleted AS (\n            DELETE FROM namespace\n            WHERE warehouse_id = $1\n            -- If recursive is true, delete all child namespaces...\n            AND (namespace_id = $2 OR ($3 AND namespace_id = ANY (SELECT namespace_id FROM child_namespaces)))\n            -- ...but only if none are locked\n            AND ((NOT EXISTS (SELECT 1 FROM child_namespaces)) OR ($3 AND NOT EXISTS (SELECT 1 FROM child_namespaces WHERE protected = true)))\n            AND NOT EXISTS (SELECT 1 FROM tabulars WHERE task_status = 'running')\n            AND (NOT EXISTS (SELECT 1 from tabulars) OR ($3 AND NOT EXISTS (SELECT 1 from tabulars WHERE protected = true)))\n            AND warehouse_id IN (\n                SELECT warehouse_id FROM warehouse WHERE status = 'active'\n            )\n            RETURNING *\n        )\n        SELECT \n            count(*) AS \"deleted_count!\",\n            (SELECT EXISTS (SELECT 1 FROM tabulars WHERE task_status = 'running')) AS \"tabular_has_running_expiration!\",\n            ARRAY(SELECT namespace_id FROM child_namespaces) AS \"child_namespaces!\",\n            ARRAY(SELECT tabular_id FROM tabulars) AS \"child_tabulars!\",\n            ARRAY(SELECT fs_protocol FROM tabulars) AS \"child_tabular_fs_protocol!\",\n            ARRAY(SELECT fs_location FROM tabulars) AS \"child_tabular_fs_location!\",\n            ARRAY(SELECT typ FROM tabulars) AS \"child_tabular_typ!: Vec<TabularType>\",\n            ARRAY(SELECT task_id FROM tabulars) AS \"child_tabular_task_id!: Vec<Option<Uuid>>\"\n        FROM deleted;\n        ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "deleted_count!",
        "type_info": "Int8"
      },
      {
        "ordinal": 1,
        "name": "tabular_has_running_expiration!",
        "type_info": "Bool"
      },
      {
        "ordinal": 2,
        "name": "child_namespaces!",
        "type_info": "UuidArray"
      },
      {
        "ordinal": 3,
        "name": "child_tabulars!",
        "type_info": "UuidArray"
      },
      {
        "ordinal": 4,
        "name": "child_tabular_fs_protocol!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 5,
        "name": "child_tabular_fs_location!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 6,
        "name": "child_tabular_typ!: Vec<TabularType>",
        "type_info": {
          "Custom": {
            "name": "tabular_type[]",
            "kind": {
              "Array": {
                "Custom": {
                  "name": "tabular_type",
                  "kind": {
                    "Enum": [
                      "table",
                      "view"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      {
        "ordinal": 7,
        "name": "child_tabular_task_id!: Vec<Option<Uuid>>",
        "type_info": "UuidArray"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Uuid",
        "Bool"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "decb5b8f92dd7311bd4829bb4518a169b219a8605f6bf00819a02eb752ff6112"
}
