{
  "db_name": "PostgreSQL",
  "query": "\n        WITH namespace_info AS (\n            SELECT namespace_name, namespace_id, protected\n            FROM namespace\n            WHERE warehouse_id = $1 AND namespace_id = $2\n        ),\n        child_namespaces AS (\n            SELECT n.protected, n.namespace_id, n.namespace_name\n            FROM namespace n\n            INNER JOIN namespace_info ni ON n.namespace_name[1:array_length(ni.namespace_name, 1)] = ni.namespace_name\n            WHERE n.warehouse_id = $1 AND n.namespace_id != $2\n        ),\n        tabulars AS (\n            SELECT ta.tabular_id, ta.name as table_name, COALESCE(ni.namespace_name, cn.namespace_name) as namespace_name, fs_location, fs_protocol, ta.typ, ta.protected, deleted_at\n            FROM tabular ta\n            LEFT JOIN namespace_info ni ON ta.namespace_id = ni.namespace_id\n            LEFT JOIN child_namespaces cn ON ta.namespace_id = cn.namespace_id\n            WHERE warehouse_id = $1 AND (ta.namespace_id = $2 AND metadata_location IS NOT NULL OR (ta.namespace_id = ANY (SELECT namespace_id FROM child_namespaces)))\n        ),\n        tasks AS (\n            SELECT t.task_id, t.status as task_status from task t\n            WHERE t.status = 'running' AND t.entity_id = ANY (SELECT tabular_id FROM tabulars) AND t.warehouse_id = $1 AND t.entity_type = 'tabular' AND queue_name = 'tabular_expiration'\n        )\n        SELECT\n            (SELECT protected FROM namespace_info) AS \"is_protected!\",\n            EXISTS (SELECT 1 FROM child_namespaces WHERE protected = true) AS \"has_protected_namespaces!\",\n            EXISTS (SELECT 1 FROM tabulars WHERE protected = true) AS \"has_protected_tabulars!\",\n            EXISTS (SELECT 1 FROM tasks WHERE task_status = 'running') AS \"has_running_tasks!\",\n            ARRAY(SELECT tabular_id FROM tabulars where deleted_at is NULL) AS \"child_tabulars!\",\n            ARRAY(SELECT namespace_name FROM tabulars where deleted_at is NULL) AS \"child_tabulars_namespace_names!: Vec<Vec<String>>\",\n            ARRAY(SELECT table_name FROM tabulars where deleted_at is NULL) AS \"child_tabulars_table_names!\",\n            ARRAY(SELECT tabular_id FROM tabulars where deleted_at is not NULL) AS \"child_tabulars_deleted!\",\n            ARRAY(SELECT namespace_id FROM child_namespaces) AS \"child_namespaces!\",\n            ARRAY(SELECT fs_protocol FROM tabulars) AS \"child_tabular_fs_protocol!\",\n            ARRAY(SELECT fs_location FROM tabulars) AS \"child_tabular_fs_location!\",\n            ARRAY(SELECT typ FROM tabulars) AS \"child_tabular_typ!: Vec<TabularType>\",\n            ARRAY(SELECT task_id FROM tasks) AS \"child_tabular_task_id!: Vec<Uuid>\"\n",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "is_protected!",
        "type_info": "Bool"
      },
      {
        "ordinal": 1,
        "name": "has_protected_namespaces!",
        "type_info": "Bool"
      },
      {
        "ordinal": 2,
        "name": "has_protected_tabulars!",
        "type_info": "Bool"
      },
      {
        "ordinal": 3,
        "name": "has_running_tasks!",
        "type_info": "Bool"
      },
      {
        "ordinal": 4,
        "name": "child_tabulars!",
        "type_info": "UuidArray"
      },
      {
        "ordinal": 5,
        "name": "child_tabulars_namespace_names!: Vec<Vec<String>>",
        "type_info": "TextArray"
      },
      {
        "ordinal": 6,
        "name": "child_tabulars_table_names!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 7,
        "name": "child_tabulars_deleted!",
        "type_info": "UuidArray"
      },
      {
        "ordinal": 8,
        "name": "child_namespaces!",
        "type_info": "UuidArray"
      },
      {
        "ordinal": 9,
        "name": "child_tabular_fs_protocol!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 10,
        "name": "child_tabular_fs_location!",
        "type_info": "TextArray"
      },
      {
        "ordinal": 11,
        "name": "child_tabular_typ!: Vec<TabularType>",
        "type_info": {
          "Custom": {
            "name": "tabular_type[]",
            "kind": {
              "Array": {
                "Custom": {
                  "name": "tabular_type",
                  "kind": {
                    "Enum": [
                      "table",
                      "view"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      {
        "ordinal": 12,
        "name": "child_tabular_task_id!: Vec<Uuid>",
        "type_info": "UuidArray"
      }
    ],
    "parameters": {
      "Left": [
        "Uuid",
        "Uuid"
      ]
    },
    "nullable": [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ]
  },
  "hash": "01136443202988753fd0134372e025f5353617f565347f9c18ddb98a5e44a788"
}
