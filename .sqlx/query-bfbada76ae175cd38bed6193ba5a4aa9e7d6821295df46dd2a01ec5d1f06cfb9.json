{
  "db_name": "PostgreSQL",
  "query": "WITH updated_task AS (\n        SELECT task_id, t.warehouse_id, config\n        FROM task t\n        LEFT JOIN task_config tc\n            ON tc.queue_name = t.queue_name\n                   AND tc.warehouse_id = t.warehouse_id\n        WHERE (t.queue_name = $1 AND scheduled_for < now() AT TIME ZONE 'UTC') \n            AND (\n                (status = $3) OR \n                (status != $3 AND (now() AT TIME ZONE 'UTC' - last_heartbeat_at) > COALESCE(tc.max_time_since_last_heartbeat, $2))\n            )           \n        -- FOR UPDATE locks the row we select here, SKIP LOCKED makes us not wait for rows other\n        -- transactions locked, this is our queue right there.\n        FOR UPDATE OF t SKIP LOCKED\n        LIMIT 1\n    )\n    UPDATE task\n    SET status = $4,\n        progress = 0.0,\n        execution_details = NULL,\n        picked_up_at = now() AT TIME ZONE 'UTC',\n        last_heartbeat_at = now() AT TIME ZONE 'UTC',\n        attempt = task.attempt + 1\n    FROM updated_task\n    WHERE task.task_id = updated_task.task_id\n    RETURNING\n        task.task_id,\n        task.entity_id,\n        task.entity_type as \"entity_type: EntityType\",\n        task.warehouse_id,\n        task.task_data,\n        task.scheduled_for,\n        task.status as \"status: TaskStatus\",\n        task.picked_up_at,\n        task.attempt,\n        task.parent_task_id,\n        task.queue_name,\n        (select config from updated_task)\n    ",
  "describe": {
    "columns": [
      {
        "ordinal": 0,
        "name": "task_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 1,
        "name": "entity_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 2,
        "name": "entity_type: EntityType",
        "type_info": {
          "Custom": {
            "name": "entity_type",
            "kind": {
              "Enum": [
                "tabular"
              ]
            }
          }
        }
      },
      {
        "ordinal": 3,
        "name": "warehouse_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 4,
        "name": "task_data",
        "type_info": "Jsonb"
      },
      {
        "ordinal": 5,
        "name": "scheduled_for",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 6,
        "name": "status: TaskStatus",
        "type_info": {
          "Custom": {
            "name": "task_intermediate_status",
            "kind": {
              "Enum": [
                "running",
                "scheduled",
                "should-stop"
              ]
            }
          }
        }
      },
      {
        "ordinal": 7,
        "name": "picked_up_at",
        "type_info": "Timestamptz"
      },
      {
        "ordinal": 8,
        "name": "attempt",
        "type_info": "Int4"
      },
      {
        "ordinal": 9,
        "name": "parent_task_id",
        "type_info": "Uuid"
      },
      {
        "ordinal": 10,
        "name": "queue_name",
        "type_info": "Text"
      },
      {
        "ordinal": 11,
        "name": "config",
        "type_info": "Jsonb"
      }
    ],
    "parameters": {
      "Left": [
        "Text",
        "Interval",
        {
          "Custom": {
            "name": "task_intermediate_status",
            "kind": {
              "Enum": [
                "running",
                "scheduled",
                "should-stop"
              ]
            }
          }
        },
        {
          "Custom": {
            "name": "task_intermediate_status",
            "kind": {
              "Enum": [
                "running",
                "scheduled",
                "should-stop"
              ]
            }
          }
        }
      ]
    },
    "nullable": [
      false,
      false,
      false,
      false,
      false,
      false,
      false,
      true,
      false,
      true,
      false,
      null
    ]
  },
  "hash": "bfbada76ae175cd38bed6193ba5a4aa9e7d6821295df46dd2a01ec5d1f06cfb9"
}
